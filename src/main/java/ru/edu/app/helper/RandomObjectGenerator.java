package ru.edu.app.helper;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Random;

public class RandomObjectGenerator {

    private final Class<?> objectType;
    private final Random random;

    public RandomObjectGenerator(Class<?> objectType) {
        this.objectType = objectType;
        random = new Random();
    }

    public Object generateObjectWithRandomValues() {
        // üî• –ü–ï–†–í–û–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ builder()
        try {
            Method builderMethod = objectType.getMethod("builder");
            if (builderMethod != null) {
                return createObjectViaBuilder();
            }
        } catch (NoSuchMethodException e) {
            // Builder –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        }

        // üî• –í–¢–û–†–û–ï: —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        Constructor<?>[] declaredConstructors = objectType.getDeclaredConstructors();

        // –ò—â–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        Constructor<?> constructor = findSuitableConstructor(declaredConstructors);

        if (constructor == null) {
            throw new IllegalStateException("No suitable constructor found for " + objectType);
        }

        return createInstance(constructor);
    }

    // üî• –ù–û–í–´–ô –ú–ï–¢–û–î: —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Builder
    private Object createObjectViaBuilder() {
        if (objectType.equals(ru.edu.model.Person.class)) {
            try {
                // –°–æ–∑–¥–∞–µ–º Person —á–µ—Ä–µ–∑ Builder —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                return ru.edu.model.Person.builder()
                        .setName(generateRandomString(6))
                        .setAge(random.nextInt(80) + 18) // –≤–æ–∑—Ä–∞—Å—Ç 18-97
                        .setCity(generateRandomString(8))
                        .build();
            } catch (IllegalArgumentException e) {
                // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–±—É–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                return createObjectViaBuilder(); // —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            }
        }

        // –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤ —Å Builder –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É
        throw new UnsupportedOperationException("Builder not yet supported for: " + objectType);
    }

    // üî• –£–õ–£–ß–®–ï–ù–ò–ï: –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    private Constructor<?> findSuitableConstructor(Constructor<?>[] constructors) {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        for (Constructor<?> constructor : constructors) {
            if (constructor.getParameterCount() == 0) {
                return constructor;
            }
        }

        // –ò—â–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        Constructor<?> bestConstructor = null;
        int minParams = Integer.MAX_VALUE;

        for (Constructor<?> constructor : constructors) {
            int paramCount = constructor.getParameterCount();
            if (paramCount < minParams && !isBuilderConstructor(constructor)) {
                bestConstructor = constructor;
                minParams = paramCount;
            }
        }

        return bestConstructor;
    }

    // üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ Builder –ª–∏ —ç—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    private boolean isBuilderConstructor(Constructor<?> constructor) {
        Class<?>[] paramTypes = constructor.getParameterTypes();
        if (paramTypes.length == 1) {
            Class<?> paramType = paramTypes[0];
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä Builder'–æ–º
            return paramType.getSimpleName().equals("Builder") &&
                    paramType.getEnclosingClass() != null &&
                    paramType.getEnclosingClass().equals(objectType);
        }
        return false;
    }

    private Object createInstance(Constructor<?> constructor) {
        constructor.setAccessible(true);
        Class<?>[] parameterTypes = constructor.getParameterTypes();
        Object[] parameters = getRandomParameters(parameterTypes);
        try {
            return constructor.newInstance(parameters);
        } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
            throw new IllegalStateException(e);
        }
    }

    private Object[] getRandomParameters(Class<?>[] parameterTypes) {
        Object result[] = new Object[parameterTypes.length];
        for (int i = 0; i < parameterTypes.length; i++) {
            result[i] = getRandomValue(parameterTypes[i]);
        }
        return result;
    }

    private Object getRandomValue(Class<?> parameterType) {
        if (parameterType.equals(String.class)) {
            int length = random.nextInt(10) + 5;
            return generateRandomString(length);
        }

        if (parameterType.equals(int.class) || parameterType.equals(Integer.class)) {
            return random.nextInt(100) + 1;
        }

        if (parameterType.equals(long.class) || parameterType.equals(Long.class)) {
            return random.nextLong();
        }

        if (parameterType.equals(double.class) || parameterType.equals(Double.class)) {
            return random.nextDouble();
        }

        if (parameterType.equals(boolean.class) || parameterType.equals(Boolean.class)) {
            return random.nextBoolean();
        }

        throw new IllegalArgumentException("Parameter type " + parameterType + " not supported");
    }

    private String generateRandomString(int length) {
        String characterSet = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è";
        StringBuilder sb = new StringBuilder();

        // –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è
        if (length > 0) {
            int index = random.nextInt(characterSet.length());
            sb.append(Character.toUpperCase(characterSet.charAt(index)));
        }

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–∫–≤—ã
        for (int i = 1; i < length; i++) {
            int index = random.nextInt(characterSet.length());
            sb.append(characterSet.charAt(index));
        }
        return sb.toString();
    }
}
