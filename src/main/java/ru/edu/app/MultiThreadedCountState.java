package ru.edu.app;

import ru.edu.model.Person;
import ru.edu.search.SimpleMultiThreadedCounter;
import java.util.*;
import java.util.function.Predicate;

class MultiThreadedCountState implements StateMenuItem {

    @Override
    public String getSelectionText() {
        return "–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤";
    }

    @Override
    public void process(AppContext context) {
        Scanner scanner = new Scanner(System.in);
        Collection<Object> collection = context.getCollection();

        if (collection.isEmpty()) {
            System.out.println("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!");
            return;
        }

        System.out.println("\n=== –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–´–ô –ü–û–î–°–ß–ï–¢ ===");
        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:");
        System.out.println("1. –ò–º—è");
        System.out.println("2. –í–æ–∑—Ä–∞—Å—Ç");
        System.out.println("3. –ì–æ—Ä–æ–¥");

        String choice = scanner.nextLine().trim();

        Predicate<Person> condition;
        String fieldName;

        switch (choice) {
            case "1":
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞: ");
                String name = scanner.nextLine().trim();
                condition = person -> person.getName().equalsIgnoreCase(name);
                fieldName = "–∏–º–µ–Ω–∏ '" + name + "'";
                break;

            case "2":
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: ");
                try {
                    int age = Integer.parseInt(scanner.nextLine().trim());
                    condition = person -> person.getAge() == age;
                    fieldName = "–≤–æ–∑—Ä–∞—Å—Ç—É " + age;
                } catch (NumberFormatException e) {
                    System.out.println("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!");
                    return;
                }
                break;

            case "3":
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞: ");
                String city = scanner.nextLine().trim();
                condition = person -> person.getCity().equalsIgnoreCase(city);
                fieldName = "–≥–æ—Ä–æ–¥—É '" + city + "'";
                break;

            default:
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                return;
        }

        System.out.println("‚è≥ –ü–æ–¥—Å—á–µ—Ç...");

        long startTime = System.currentTimeMillis();
        int count = SimpleMultiThreadedCounter.countPersons(collection, condition);
        long endTime = System.currentTimeMillis();

        System.out.println("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:");
        System.out.println("–ü–æ–∏—Å–∫ –ø–æ: " + fieldName);
        System.out.println("–ù–∞–π–¥–µ–Ω–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π: " + count);
        System.out.println("–í—Ä–µ–º—è: " + (endTime - startTime) + " –º—Å");
        System.out.println("–ü–æ—Ç–æ–∫–æ–≤: " + Runtime.getRuntime().availableProcessors());

        if (count == 0) {
            System.out.println("üí° –°–æ–≤–µ—Ç: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö");
        }
    }
}

