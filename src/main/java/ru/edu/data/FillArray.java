package ru.edu.data;

import ru.edu.model.Person;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

import static java.lang.System.*;



public class FillArray {
    List<Person> personList = new ArrayList<>();

    public List<Person> getPersonList() {
        return personList;
    }

    public void FillArrayInFile() {
        String path = "src/main/java/ru/edu/data/data.txt";
        personList = readFile(path);
        if (personList != null) {
            for (Person person : personList) {
                out.println(person);
            }
        }
    }

    public List<Person> readFile(String filePath) {
        List<Person> list = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            int lineNumber = 0;
            int successCount = 0;
            int errorCount = 0;

            while ((line = reader.readLine()) != null) {
                lineNumber++;

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if (line.trim().isEmpty()) {
                    continue;
                }

                try {
                    String[] parts = line.split(",");
                    if (parts.length == 3) {
                        String name = parts[0].trim();
                        int age = Integer.parseInt(parts[1].trim());
                        String city = parts[2].trim();

                        // üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú BUILDER –° –í–ê–õ–ò–î–ê–¶–ò–ï–ô
                        Person person = Person.builder()
                                .setName(name)
                                .setAge(age)
                                .setCity(city)
                                .build(); // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å!

                        list.add(person);
                        successCount++;

                    } else {
                        err.println("üö® –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ " + lineNumber + ": " + line);
                        err.println("   –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: –∏–º—è,–≤–æ–∑—Ä–∞—Å—Ç,–≥–æ—Ä–æ–¥");
                        errorCount++;
                    }

                } catch (NumberFormatException e) {
                    err.println("üö® –û—à–∏–±–∫–∞ —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ " + lineNumber + ": " + line);
                    err.println("   –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
                    errorCount++;

                } catch (IllegalArgumentException e) {
                    err.println("üö® –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Å—Ç—Ä–æ–∫–µ " + lineNumber + ": " + line);
                    err.println("   " + e.getMessage());
                    errorCount++;
                }
            }

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            out.println(" –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:");
            out.println(" –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: " + successCount + " –∑–∞–ø–∏—Å–µ–π");
            out.println(" –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: " + errorCount + " –∑–∞–ø–∏—Å–µ–π");
            out.println(" –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: " + lineNumber);

        } catch (FileNotFoundException e) {
            out.println("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: " + filePath);
        } catch (IOException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞", e);
        }

        return list;
    }

    public List<String> readFileWithRandom(String filePath) {
        List<String> arrayRandom = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                for (String part : parts) {
                    arrayRandom.add(part.replaceAll("\\s", ""));
                }
            }
        } catch (FileNotFoundException e) {
            out.println("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return arrayRandom;
    }


    public void FillArrayRandom() {
        String pathName = "src/main/java/ru/edu/data/randomName.txt";
        String pathCity = "src/main/java/ru/edu/data/randomCity.txt";
        Random random = new Random();

        while (personList.isEmpty()) {
            try {
                out.print("–ö–∞–∫–æ–µ –∫–æ–ª-–≤–æ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å—Å—è: ");
                Scanner scanner = new Scanner(in);
                int count = scanner.nextInt();

                List<String> randomName = readFileWithRandom(pathName);
                List<String> randomCity = readFileWithRandom(pathCity);

                for (int i = 0; i < count; i++) {
                    int randomIndexName = random.nextInt(randomName.size());
                    int randomIndexCity = random.nextInt(randomCity.size());
                    // personList.add(new Person(randomName.get(randomIndexName), random.nextInt(1, 123), randomCity.get(randomIndexCity)));

                    //  (–∏—Å–ø–æ–ª—å–∑—É–µ–º Builder):
                    Person person = Person.builder()
                            .setName(randomName.get(randomIndexName))
                            .setAge(random.nextInt(1, 123))
                            .setCity(randomCity.get(randomIndexCity))
                            .build();

                    personList.add(person);
                }
            } catch (InputMismatchException ex) {
                out.println("–ù–µ–∫–∫–æ—Ä–µ—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ!");
            } catch (IllegalArgumentException e) {
                out.println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Person: " + e.getMessage());
            }
        }
    }

    public void FillArrayScanner() {
        while (personList.isEmpty()) {

            try {
                out.print("–ö–∞–∫–æ–µ –∫–æ–ª-–≤–æ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å—Å—è: ");
                Scanner scanner = new Scanner(in);
                int count = scanner.nextInt();
                scanner.nextLine();
                int age = 0;
                int sizePersonList = personList.size();
                for (int i = sizePersonList; i < count + sizePersonList; i++) {

                    out.print("\n –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è " + (i + 1) + " —ç–ª–µ–º–µ–Ω—Ç–∞:");
                    String name = scanner.nextLine();

                    while (age == 0 || age > 123){
                        try {
                            out.print("\n –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–≤—Ä–∞—Å—Ç –¥–ª—è " + (i + 1) + " —ç–ª–µ–º–µ–Ω—Ç–∞:");
                            age = scanner.nextInt();
                            scanner.nextLine();
                            if (age > 123) {
                                out.println("–í–æ–∑—Ä–∞—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!");
                            }
                        } catch (InputMismatchException ex) {
                            out.println("–ù–µ–∫–∫–æ—Ä–µ—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ!");
                            scanner.nextLine();
                        }
                    }

                    out.print("\n –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è " + (i + 1) + " —ç–ª–µ–º–µ–Ω—Ç–∞:");
                    String city = scanner.nextLine();

                    // personList.add(new Person(name, age, city));

                    // (–∏—Å–ø–æ–ª—å–∑—É–µ–º Builder):
                    try {
                        Person person = Person.builder()
                                .setName(name)
                                .setAge(age)
                                .setCity(city)
                                .build();

                        personList.add(person);
                    } catch (IllegalArgumentException e) {
                        out.println("–û—à–∏–±–∫–∞: " + e.getMessage());
                        i--; // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    }

                    age = 0; // –°–±—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                }
            } catch (InputMismatchException ex) {
                out.println("–ù–µ–∫–∫–æ—Ä–µ—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ!");
            }
        }
    }
}